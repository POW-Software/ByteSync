using System.Collections.Generic;
using System.Threading.Tasks;
using ByteSync.Business;
using ByteSync.Business.Inventories;
using ByteSync.Common.Business.Sessions.Cloud;
using ByteSync.Common.Business.SharedFiles;
using ByteSync.Interfaces.Controls.Communications.Http;
using ByteSync.Interfaces.Controls.Sessions;
using ByteSync.Interfaces.Services.Communications;
using ByteSync.Services.Inventories;
using ByteSync.Tests.TestUtilities.Mock;
using DynamicData;
using Microsoft.Extensions.Logging;
using NUnit.Framework;
using Moq;
using NUnit.Framework.Legacy;

namespace ByteSync.Controls.Inventories.Tests
{
    [TestFixture]
    public class InventoryServiceTests
    {
        private Mock<ISessionService> _sessionServiceMock;
        private Mock<IConnectionService> _connectionServiceMock;
        private Mock<IInventoryApiClient> _inventoryApiClientMock;
        private Mock<ILogger<InventoryService>> _loggerMock;
        private InventoryService _inventoryService;
        
        /*
        [SetUp]
        public void Setup()
        {
            _sessionMembersServiceMock = new Mock<ISessionMembersService>();
            _sessionServiceMock = new Mock<ISessionService>();
            _connectionServiceMock = new Mock<IConnectionService>();
            _inventoryApiClientMock = new Mock<IInventoryApiClient>();
            _loggerMock = new Mock<ILogger<InventoryService>>();
            _inventoryService = new InventoryService(_sessionMembersServiceMock.Object, _sessionServiceMock.Object, _connectionServiceMock.Object,
                _inventoryApiClientMock.Object, _loggerMock.Object);
        }

        [Test]
        public async Task GetAllInventoriesFiles_BaseInventoryMode_ReturnsCorrectResult()
        {
            _connectionManagerMock.SetupGetCurrentEndpoint();
            
            // Arrange
            var sourceList = new SourceCache<SessionMemberInfo, string>(smi => smi.ClientInstanceId);
            _sessionMembersServiceMock.SetupGet(m => m.OtherSessionMembers)
                .Returns(sourceList)
                .Verifiable();
            
            var inventoryFiles = new List<InventoryFile>
            {
                new InventoryFile(new SharedFileDefinition
                {
                    SharedFileType = SharedFileTypes.BaseInventory, ClientInstanceId = "CID0"
                }, "baseTestPath1"),
                new InventoryFile(new SharedFileDefinition
                {
                    SharedFileType = SharedFileTypes.BaseInventory, ClientInstanceId = "CID0"
                }, "baseTestPath2")
            };

            await _inventoryService.SetLocalInventory(inventoryFiles, LocalInventoryModes.Base);

            // Act
            var result = _inventoryService.GetAllInventoriesFiles(LocalInventoryModes.Base);

            // Assert
            ClassicAssert.AreEqual(2, result.Count);
            ClassicAssert.AreEqual(LocalInventoryModes.Base, result[0].LocalInventoryMode);
            ClassicAssert.AreEqual(LocalInventoryModes.Base, result[1].LocalInventoryMode);
            
            _connectionManagerMock.Verify();
            _sessionMembersServiceMock.Verify();
        }
        
        [Test]
        // write a test for InventoryService.SetLocalInventoryGlobalStatus
        // Generated by Copilot
        public async Task SetLocalInventoryGlobalStatus_BaseInventoryMode_ReturnsCorrectResult()
        {
            _connectionManagerMock.SetupGetCurrentEndpoint();
            
            // Arrange
            var sourceList = new SourceCache<SessionMemberInfo, string>(smi => smi.ClientInstanceId);
            _sessionMembersServiceMock.SetupGet(m => m.OtherSessionMembers)
                .Returns(sourceList)
                .Verifiable();
            
            var inventoryFiles = new List<InventoryFile>
            {
                new InventoryFile(new SharedFileDefinition
                {
                    SharedFileType = SharedFileTypes.BaseInventory, ClientInstanceId = "CID0"
                }, "baseTestPath1"),
                new InventoryFile(new SharedFileDefinition
                {
                    SharedFileType = SharedFileTypes.BaseInventory, ClientInstanceId = "CID0"
                }, "baseTestPath2")
            };

            await _inventoryService.SetLocalInventory(inventoryFiles, LocalInventoryModes.Base);

            // Act
            var result = _inventoryService.GetAllInventoriesFiles(LocalInventoryModes.Base);

            // Assert
            ClassicAssert.AreEqual(2, result.Count);
            ClassicAssert.AreEqual(LocalInventoryModes.Base, result[0].LocalInventoryMode);
            ClassicAssert.AreEqual(LocalInventoryModes.Base, result[1].LocalInventoryMode);
            
            _connectionManagerMock.Verify();
            _sessionMembersServiceMock.Verify();
        }
        
        [Test]
        public async Task HandleLocalInventoryGlobalStatusChanged_BaseInventoryMode_ReturnsCorrectResult()
        {
            _connectionManagerMock.SetupGetCurrentEndpoint();
            
            // Arrange
            var sourceList = new SourceCache<SessionMemberInfo, string>(smi => smi.ClientInstanceId);
            _sessionMembersServiceMock.SetupGet(m => m.OtherSessionMembers)
                .Returns(sourceList)
                .Verifiable();
            
            var inventoryFiles = new List<InventoryFile>
            {
                new InventoryFile(new SharedFileDefinition
                {
                    SharedFileType = SharedFileTypes.BaseInventory, ClientInstanceId = "CID0"
                }, "baseTestPath1"),
                new InventoryFile(new SharedFileDefinition
                {
                    SharedFileType = SharedFileTypes.BaseInventory, ClientInstanceId = "CID0"
                }, "baseTestPath2")
            };

            await _inventoryService.SetLocalInventory(inventoryFiles, LocalInventoryModes.Base);

            // Act
            var result = _inventoryService.GetAllInventoriesFiles(LocalInventoryModes.Base);

            // Assert
            ClassicAssert.AreEqual(2, result.Count);
            ClassicAssert.AreEqual(LocalInventoryModes.Base, result[0].LocalInventoryMode);
            ClassicAssert.AreEqual(LocalInventoryModes.Base, result[1].LocalInventoryMode);
            
            _connectionManagerMock.Verify();
            _sessionMembersServiceMock.Verify();
        }*/
    }
}